from time import time
from PIL import Image
import numpy as np
import pandas as pd
import streamlit as st

# For plotting
from matplotlib import offsetbox
import matplotlib.pyplot as plt
import matplotlib.patheffects as PathEffects
import seaborn as sns
import plotly.graph_objects as go

sns.set(style='white', context='notebook', rc={'figure.figsize':(14,10)})

#For standardising the dat
from sklearn.preprocessing import StandardScaler

#PCA
from sklearn.manifold import TSNE

#Ignore warnings
import warnings
warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)

def clustering():
    st.title("Кластеризация")
    
    st.markdown(
    """
    ## Введение

    Добро пожаловать в обзор методов кластеризации и визуализации данных! В мире машинного обучения существует множество методов,
    позволяющих структурировать данные и находить в них закономерности.
    Кластеризация — один из таких методов, который помогает группировать данные на основе их сходства. 
    В этом обзоре мы рассмотрим основные концепции кластеризации, а также два широко используемых метода визуализации данных:
    t-SNE (t-distributed Stochastic Neighbor Embedding) и PCA (Principal Component Analysis).

    Базовый рассказ о кластеризации
    Кластеризация — это задача разделения набора данных на группы, или кластеры, таким образом, чтобы объекты внутри одного кластера были похожи друг на друга, 
    а объекты из разных кластеров — различались. Существует множество алгоритмов кластеризации, включая k-средних (k-means), иерархическую кластеризацию, DBSCAN и многие другие. 
    Каждый из них имеет свои преимущества и недостатки и может быть применен в зависимости от природы данных и поставленной задачи.

    Теоретическая справка
    t-SNE (t-distributed Stochastic Neighbor Embedding)
    t-SNE — это метод визуализации многомерных данных, который позволяет сократить размерность данных до двух или трех измерений, 
    сохраняя при этом относительные расстояния между точками. Основная идея t-SNE заключается в том, 
    чтобы отобразить точки из пространства высокой размерности в пространство низкой размерности таким образом, чтобы близкие точки в исходном пространстве оставались близкими, 
    а далекие — далекими. Это позволяет визуализировать сложные структуры данных и обнаруживать паттерны, которые могли бы быть невидимы в исходном пространстве.

    PCA (Principal Component Analysis)
    PCA — это метод анализа данных, который используется для уменьшения размерности данных. Главная идея PCA заключается в том, чтобы найти направления (главные компоненты), 
    вдоль которых данные имеют наибольший разброс, и проецировать данные на эти направления. Таким образом, PCA позволяет перейти от исходного пространства признаков 
    к новому пространству меньшей размерности, сохраняя при этом как можно больше дисперсии данных. Этот метод часто используется для сжатия данных, удаления шума 
    и визуализации многомерных данных.
    """)

    st.markdown(
        """
        В качестве датасета для нашего тренажера будет использован набор данных о языке Каннада. Каннада - язык, на котором говорят преимущественно жители штата Карнатака на юго-западе Индии.
        На этом языке говорят около 45 миллионов человек, и он написан с использованием алфавита каннада.

        """)

    # Загрузка изображения
    image = Image.open("images/kannada.png")

    # Отображение изображения
    st.image(image, caption='Цифры данного языка ', use_column_width=True)

